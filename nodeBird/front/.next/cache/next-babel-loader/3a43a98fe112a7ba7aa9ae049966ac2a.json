{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE'; //동적 action creater(액션을 그때그때 생성)\n\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      {\n        draft.mainPosts.unshift(action.data);\n        draft.retweetDone = true;\n        draft.retweetLoading = false;\n        break;\n      }\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = action.data;\n        draft.uploadImagesDone = true;\n        draft.uploadImagesLoading = false;\n        break;\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostDone = true;\n        draft.likePostLoading = false;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostDone = true;\n        draft.unlikePostLoading = false;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      //기존 게시글에  concat으로 action.data 추가.\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.loadPostsDone = true;\n      draft.loadPostsLoading = false; //50개까지만 더 불러오기\n\n      draft.hasMorePost = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.imagePaths = [];\n      draft.mainPosts.unshift(action.data);\n      draft.addPostDone = true;\n      draft.addPostLoading = false;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      draft.removePostDone = true;\n      draft.removePostLoading = false;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        //조건을 만족하는 게시글 index 찾기\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId); //게시글에 새 댓글 넣어줌\n\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n\n  ;\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/user/cmder/projects/nodebird/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePost","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_IMAGE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","unshift","error","filter","v","i","post","find","id","PostId","Likers","push","UserId","concat","length","Comments"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    hasMorePost: true,\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    retweetLoading: false,\r\n    retweetDone: false,\r\n    retweetError: null,\r\n};\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\n\r\n\r\n//동적 action creater(액션을 그때그때 생성)\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst reducer = (state = initialState, action) =>     produce(state, (draft) => {\r\n    switch(action.type){\r\n        case RETWEET_REQUEST:\r\n            draft.retweetLoading = true;\r\n            draft.retweetDone = false;\r\n            draft.retweetError = null;\r\n            break; \r\n        case RETWEET_SUCCESS: {\r\n            draft.mainPosts.unshift(action.data);\r\n            draft.retweetDone = true;\r\n            draft.retweetLoading = false;\r\n            break;\r\n        }\r\n        case RETWEET_FAILURE:\r\n            draft.retweetLoading = false;\r\n            draft.retweetError = action.error;\r\n            break;\r\n\r\n        case REMOVE_IMAGE:\r\n            draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n            break;\r\n\r\n        case UPLOAD_IMAGES_REQUEST:\r\n            draft.uploadImagesLoading = true;\r\n            draft.uploadImagesDone = false;\r\n            draft.uploadImagesError = null;\r\n            break; \r\n        case UPLOAD_IMAGES_SUCCESS: {\r\n            draft.imagePaths = action.data;\r\n            draft.uploadImagesDone = true;\r\n            draft.uploadImagesLoading = false;\r\n            break;\r\n        }\r\n        case UPLOAD_IMAGES_FAILURE:\r\n            draft.uploadImagesLoading = false;\r\n            draft.uploadImagesError = action.error;\r\n            break;\r\n\r\n        case LIKE_POST_REQUEST:\r\n            draft.likePostLoading = true;\r\n            draft.likePostDone = false;\r\n            draft.likePostError = null;\r\n            break; \r\n        case LIKE_POST_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Likers.push({id: action.data.UserId});\r\n            draft.likePostDone = true;\r\n            draft.likePostLoading = false;\r\n            break;\r\n        }\r\n        case LIKE_POST_FAILURE:\r\n            draft.likePostLoading = false;\r\n            draft.likePostError = action.error;\r\n            break;\r\n        \r\n        case UNLIKE_POST_REQUEST:\r\n            draft.unlikePostLoading = true;\r\n            draft.unlikePostDone = false;\r\n            draft.unlikePostError = null;\r\n            break; \r\n        case UNLIKE_POST_SUCCESS:{\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n            draft.unlikePostDone = true;\r\n            draft.unlikePostLoading = false;\r\n            break;\r\n        }\r\n        case UNLIKE_POST_FAILURE:\r\n            draft.unlikePostLoading = false;\r\n            draft.unlikePostError = action.error;\r\n            break;\r\n\r\n        case LOAD_POSTS_REQUEST:\r\n            draft.loadPostsLoading = true;\r\n            draft.loadPostsDone = false;\r\n            draft.loadPostsError = null;\r\n            break; \r\n        case LOAD_POSTS_SUCCESS:\r\n            //기존 게시글에  concat으로 action.data 추가.\r\n            draft.mainPosts = action.data.concat(draft.mainPosts);\r\n            draft.loadPostsDone = true;\r\n            draft.loadPostsLoading = false;\r\n            //50개까지만 더 불러오기\r\n            draft.hasMorePost = draft.mainPosts.length < 50;\r\n            break;\r\n        case LOAD_POSTS_FAILURE:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsError = action.error;\r\n            break;\r\n\r\n        case ADD_POST_REQUEST:\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n            break;            \r\n        case ADD_POST_SUCCESS:\r\n            draft.imagePaths = [];\r\n            draft.mainPosts.unshift(action.data);\r\n            draft.addPostDone = true;\r\n            draft.addPostLoading = false;\r\n            break;\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = false;\r\n            draft.addPostError = action.error;\r\n            break;\r\n\r\n        case REMOVE_POST_REQUEST:\r\n            draft.removePostLoading = true;\r\n            draft.removePostDone = false;\r\n            draft.removePostError = null;\r\n            break;\r\n        case REMOVE_POST_SUCCESS:\r\n            draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n            draft.removePostDone = true;\r\n            draft.removePostLoading = false;\r\n            break;\r\n        case REMOVE_POST_FAILURE:\r\n            draft.removePostLoading = false;\r\n            draft.removePostError = action.error;\r\n            break;\r\n\r\n        case ADD_COMMENT_REQUEST:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentDone = false;\r\n            draft.addCommentError = null;\r\n            break;\r\n        case ADD_COMMENT_SUCCESS:{  \r\n            //조건을 만족하는 게시글 index 찾기\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            //게시글에 새 댓글 넣어줌\r\n            post.Comments.unshift(action.data);\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentDone = true;\r\n            break;\r\n        }\r\n        case ADD_COMMENT_FAILURE:\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentError = action.error;\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    };\r\n});\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}