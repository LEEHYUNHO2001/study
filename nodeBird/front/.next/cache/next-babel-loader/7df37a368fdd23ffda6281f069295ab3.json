{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Home = function Home() {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePost = _useSelector2.hasMorePost,\n      loadPostsLoading = _useSelector2.loadPostsLoading,\n      retweetError = _useSelector2.retweetError;\n\n  useEffect(function () {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(function () {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePost && !loadPostsLoading) {\n          var _mainPosts;\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId: lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePost, loadPostsLoading, mainPosts]);\n  return /*#__PURE__*/_jsxs(AppLayout, {\n    children: [me && /*#__PURE__*/_jsx(PostForm, {}), mainPosts.map(function (post, i) {\n      return /*#__PURE__*/_jsx(PostCard, {\n        post: post\n      }, post.id);\n    })]\n  });\n};\n\nexport var __N_SSP = true;\nexport default Home;","map":{"version":3,"sources":["C:/Users/user/cmder/projects/nodebird/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","Home","dispatch","state","user","me","post","mainPosts","hasMorePost","loadPostsLoading","retweetError","alert","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map","i"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAIA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;;;;AAKA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACf,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;;AACA,qBAAaC,WAAW,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAAxB;AAAA,MAAOC,EAAP,gBAAOA,EAAP;;AACA,sBAAiET,WAAW,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACG,IAAjB;AAAA,GAAD,CAA5E;AAAA,MAAOC,SAAP,iBAAOA,SAAP;AAAA,MAAkBC,WAAlB,iBAAkBA,WAAlB;AAAA,MAA+BC,gBAA/B,iBAA+BA,gBAA/B;AAAA,MAAiDC,YAAjD,iBAAiDA,YAAjD;;AAEAhB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAGgB,YAAH,EAAgB;AACZC,MAAAA,KAAK,CAACD,YAAD,CAAL;AACH;AACJ,GAJQ,EAIN,CAACA,YAAD,CAJM,CAAT;AAMAhB,EAAAA,SAAS,CAAC,YAAM;AACZ,aAASkB,QAAT,GAAmB;AACf,UAAGC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GACGF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAD9C,EACkD;AAC1C,YAAGV,WAAW,IAAI,CAACC,gBAAnB,EAAoC;AAAA;;AAChC,cAAMU,MAAM,iBAAGZ,SAAS,CAACA,SAAS,CAACa,MAAV,GAAmB,CAApB,CAAZ,+CAAG,WAAiCC,EAAhD;AACAnB,UAAAA,QAAQ,CAAC;AACLoB,YAAAA,IAAI,EAAEtB,kBADD;AAELmB,YAAAA,MAAM,EAANA;AAFK,WAAD,CAAR;AAIH;AACJ;AACR;;AACDN,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCX,QAAlC;AACA,WAAO,YAAM;AACTC,MAAAA,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCZ,QAArC;AACH,KAFD;AAGH,GAjBQ,EAiBN,CAACJ,WAAD,EAAcC,gBAAd,EAAgCF,SAAhC,CAjBM,CAAT;AAmBA,sBACI,MAAC,SAAD;AAAA,eACKF,EAAE,iBAAI,KAAC,QAAD,KADX,EAEKE,SAAS,CAACkB,GAAV,CAAc,UAACnB,IAAD,EAAOoB,CAAP;AAAA,0BAAa,KAAC,QAAD;AAAwB,QAAA,IAAI,EAAEpB;AAA9B,SAAeA,IAAI,CAACe,EAApB,CAAb;AAAA,KAAd,CAFL;AAAA,IADJ;AAMH,CApCD;;;AAyDA,eAAepB,IAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {END} from 'redux-saga';\r\nimport axios from 'axios';\r\n\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\n\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const {me} = useSelector((state) => state.user);\r\n    const {mainPosts, hasMorePost, loadPostsLoading, retweetError} = useSelector((state) => state.post);\r\n\r\n    useEffect(() => {\r\n        if(retweetError){\r\n            alert(retweetError);\r\n        }\r\n    }, [retweetError]);\r\n\r\n    useEffect(() => {\r\n        function onScroll(){\r\n            if(window.scrollY + document.documentElement.clientHeight \r\n                > document.documentElement.scrollHeight - 300){\r\n                    if(hasMorePost && !loadPostsLoading){\r\n                        const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                        dispatch({\r\n                            type: LOAD_POSTS_REQUEST,\r\n                            lastId,\r\n                        });\r\n                    }\r\n                }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [hasMorePost, loadPostsLoading, mainPosts]);\r\n\r\n    return(\r\n        <AppLayout>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((post, i) => <PostCard key={post.id} post={post} />)}\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n    //console.log(context);\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if(context.req && cookie){\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });\r\n    context.store.dispatch(END);\r\n    //sagaTack는 store에서 설정했음\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}