{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay, throttle } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    //서버를 구현하기 전까지 delay로 비동기적인 효과 주자.\n    yield delay(1000); //const result = yield call(loadPostsAPI, action.data);\n\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      //data: result.data,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      //data: result.data,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/user/cmder/projects/nodebird/front/sagas/post.js"],"names":["all","fork","call","put","takeLatest","delay","throttle","shortId","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","id","generate","type","err","error","response","addPostAPI","post","content","addPost","result","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all, fork, call, put, takeLatest, delay, throttle} from 'redux-saga/effects';\r\nimport shortId from 'shortid';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction loadPostsAPI(data){\r\n    return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try{\r\n        //서버를 구현하기 전까지 delay로 비동기적인 효과 주자.\r\n        yield delay(1000);\r\n        //const result = yield call(loadPostsAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            //data: result.data,\r\n            data: generateDummyPost(10),\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('/post', {content: data});\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try{\r\n        const result = yield call(addPostAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data){\r\n    return axios.delete('/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try{\r\n        //const result = yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            //data: result.data,\r\n            data: action.data\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try{\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts(){\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchLoadPosts),\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}