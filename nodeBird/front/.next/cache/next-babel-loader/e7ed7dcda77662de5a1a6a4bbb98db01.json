{"ast":null,"code":"import produce from 'immer';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  singlePost: null,\n  hasMorePost: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport var LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport var LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport var LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport var LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport var LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE'; //동적 action creater(액션을 그때그때 생성)\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        {\n          draft.mainPosts.unshift(action.data);\n          draft.retweetDone = true;\n          draft.retweetLoading = false;\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesDone = true;\n          draft.uploadImagesLoading = false;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostDone = true;\n          draft.likePostLoading = false;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostDone = true;\n          draft.unlikePostLoading = false;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.singlePost = action.data;\n        draft.loadPostDone = true;\n        draft.loadPostLoading = false;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n      //한페이지에서 액션들이 같이 사용되지않을때는 상태가 공유되어도된다.(state줄이기, 재사용)\n\n      case LOAD_USER_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_USER_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_POSTS_SUCCESS:\n        //기존 게시글에  concat으로 action.data 추가.\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.loadPostsDone = true;\n        draft.loadPostsLoading = false; //23개의 게시물이 있을경우, 3개남았을때 hasMorePost = false\n\n        draft.hasMorePost = action.data.length === 10;\n        break;\n\n      case LOAD_USER_POSTS_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.imagePaths = [];\n        draft.mainPosts.unshift(action.data);\n        draft.addPostDone = true;\n        draft.addPostLoading = false;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n        draft.removePostDone = true;\n        draft.removePostLoading = false;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          //조건을 만족하는 게시글 index 찾기\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          }); //게시글에 새 댓글 넣어줌\n\n\n          _post2.Comments.unshift(action.data);\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n\n    ;\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/user/cmder/projects/nodebird/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","singlePost","hasMorePost","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostLoading","loadPostDone","loadPostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_IMAGE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","unshift","error","filter","v","i","post","find","id","PostId","Likers","push","UserId","concat","length","Comments"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    singlePost: null,\r\n    hasMorePost: true,\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n    loadPostLoading: false,\r\n    loadPostDone: false,\r\n    loadPostError: null,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    retweetLoading: false,\r\n    retweetDone: false,\r\n    retweetError: null,\r\n};\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\n\r\n\r\n//동적 action creater(액션을 그때그때 생성)\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst reducer = (state = initialState, action) =>     produce(state, (draft) => {\r\n    switch(action.type){\r\n        case RETWEET_REQUEST:\r\n            draft.retweetLoading = true;\r\n            draft.retweetDone = false;\r\n            draft.retweetError = null;\r\n            break; \r\n        case RETWEET_SUCCESS: {\r\n            draft.mainPosts.unshift(action.data);\r\n            draft.retweetDone = true;\r\n            draft.retweetLoading = false;\r\n            break;\r\n        }\r\n        case RETWEET_FAILURE:\r\n            draft.retweetLoading = false;\r\n            draft.retweetError = action.error;\r\n            break;\r\n\r\n        case REMOVE_IMAGE:\r\n            draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n            break;\r\n\r\n        case UPLOAD_IMAGES_REQUEST:\r\n            draft.uploadImagesLoading = true;\r\n            draft.uploadImagesDone = false;\r\n            draft.uploadImagesError = null;\r\n            break; \r\n        case UPLOAD_IMAGES_SUCCESS: {\r\n            draft.imagePaths = action.data;\r\n            draft.uploadImagesDone = true;\r\n            draft.uploadImagesLoading = false;\r\n            break;\r\n        }\r\n        case UPLOAD_IMAGES_FAILURE:\r\n            draft.uploadImagesLoading = false;\r\n            draft.uploadImagesError = action.error;\r\n            break;\r\n\r\n        case LIKE_POST_REQUEST:\r\n            draft.likePostLoading = true;\r\n            draft.likePostDone = false;\r\n            draft.likePostError = null;\r\n            break; \r\n        case LIKE_POST_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Likers.push({id: action.data.UserId});\r\n            draft.likePostDone = true;\r\n            draft.likePostLoading = false;\r\n            break;\r\n        }\r\n        case LIKE_POST_FAILURE:\r\n            draft.likePostLoading = false;\r\n            draft.likePostError = action.error;\r\n            break;\r\n        \r\n        case UNLIKE_POST_REQUEST:\r\n            draft.unlikePostLoading = true;\r\n            draft.unlikePostDone = false;\r\n            draft.unlikePostError = null;\r\n            break; \r\n        case UNLIKE_POST_SUCCESS:{\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n            draft.unlikePostDone = true;\r\n            draft.unlikePostLoading = false;\r\n            break;\r\n        }\r\n        case UNLIKE_POST_FAILURE:\r\n            draft.unlikePostLoading = false;\r\n            draft.unlikePostError = action.error;\r\n            break;\r\n\r\n        case LOAD_POST_REQUEST:\r\n            draft.loadPostLoading = true;\r\n            draft.loadPostDone = false;\r\n            draft.loadPostError = null;\r\n            break; \r\n        case LOAD_POST_SUCCESS:\r\n            draft.singlePost = action.data;\r\n            draft.loadPostDone = true;\r\n            draft.loadPostLoading = false;\r\n            break;\r\n        case LOAD_POST_FAILURE:\r\n            draft.loadPostLoading = false;\r\n            draft.loadPostError = action.error;\r\n            break;\r\n\r\n        //한페이지에서 액션들이 같이 사용되지않을때는 상태가 공유되어도된다.(state줄이기, 재사용)\r\n        case LOAD_USER_POSTS_REQUEST:\r\n        case LOAD_HASHTAG_POSTS_REQUEST:\r\n        case LOAD_POSTS_REQUEST:\r\n            draft.loadPostsLoading = true;\r\n            draft.loadPostsDone = false;\r\n            draft.loadPostsError = null;\r\n            break; \r\n        case LOAD_USER_POSTS_SUCCESS:\r\n        case LOAD_HASHTAG_POSTS_SUCCESS:\r\n        case LOAD_POSTS_SUCCESS:\r\n            //기존 게시글에  concat으로 action.data 추가.\r\n            draft.mainPosts = draft.mainPosts.concat(action.data);\r\n            draft.loadPostsDone = true;\r\n            draft.loadPostsLoading = false;\r\n            //23개의 게시물이 있을경우, 3개남았을때 hasMorePost = false\r\n            draft.hasMorePost = action.data.length === 10;\r\n            break;\r\n        case LOAD_USER_POSTS_FAILURE:\r\n        case LOAD_HASHTAG_POSTS_FAILURE:\r\n        case LOAD_POSTS_FAILURE:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsError = action.error;\r\n            break;\r\n\r\n        case ADD_POST_REQUEST:\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n            break;            \r\n        case ADD_POST_SUCCESS:\r\n            draft.imagePaths = [];\r\n            draft.mainPosts.unshift(action.data);\r\n            draft.addPostDone = true;\r\n            draft.addPostLoading = false;\r\n            break;\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = false;\r\n            draft.addPostError = action.error;\r\n            break;\r\n\r\n        case REMOVE_POST_REQUEST:\r\n            draft.removePostLoading = true;\r\n            draft.removePostDone = false;\r\n            draft.removePostError = null;\r\n            break;\r\n        case REMOVE_POST_SUCCESS:\r\n            draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n            draft.removePostDone = true;\r\n            draft.removePostLoading = false;\r\n            break;\r\n        case REMOVE_POST_FAILURE:\r\n            draft.removePostLoading = false;\r\n            draft.removePostError = action.error;\r\n            break;\r\n\r\n        case ADD_COMMENT_REQUEST:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentDone = false;\r\n            draft.addCommentError = null;\r\n            break;\r\n        case ADD_COMMENT_SUCCESS:{  \r\n            //조건을 만족하는 게시글 index 찾기\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            //게시글에 새 댓글 넣어줌\r\n            post.Comments.unshift(action.data);\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentDone = true;\r\n            break;\r\n        }\r\n        case ADD_COMMENT_FAILURE:\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentError = action.error;\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    };\r\n});\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}