{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from 'shortid';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '이현호'\n    },\n    content: 'first comment #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://cloudfront-ap-northeast-1.images.arcpublishing.com/chosunbiz/XGP7CUGLG5HFNO3WB25C6D6VY4.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://nodebird.com/favicon.ico'\n    }, {\n      id: shortId.generate(),\n      src: 'https://cdn.cms-twdigitalassets.com/content/dam/blog-twitter/official/ko_kr/products/2019/topics/CB-14444_TopicsCOMMS_7_20191107.png.img.fullhd.medium.png'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hoho'\n      },\n      content: '개정판?'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'yyzz'\n      },\n      content: '사고싶다'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //동적 action creater(액션을 그때그때 생성)\n\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '이현호'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '이현호'\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostDone: true,\n        addPostLoading: false\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        //mainPosts에서 id가 action.data.postId와 같은 인덱스 찾기\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId); //mainPosts[postIndex]가 변경될 포스트이므로 얕은복사\n\n        const post = _objectSpread({}, state.mainPosts[postIndex]); //Comments 얕은복사하면서 댓글 넣어주기\n\n\n        post.Comments = [dummyComment(action.data.content), ...post.Comments]; //Comments가 얕은복사되어 새로운 객체가 생겼으니 mainPosts도 새로운 객체로 만듬\n\n        const mainPosts = [...state.mainPosts]; //원래포스트 있던 자리에 post 넣어줌\n\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          //메인포스트 변경된값 추가\n          mainPosts,\n          addCommentDone: true,\n          addCommentLoading: false\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/user/cmder/projects/nodebird/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","error","postIndex","findIndex","v","postId","post"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\n\r\nexport const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: '이현호'\r\n        },\r\n        content: 'first comment #해시태그 #익스프레스',\r\n        Images: [{\r\n            id: shortId.generate(),\r\n            src:'https://cloudfront-ap-northeast-1.images.arcpublishing.com/chosunbiz/XGP7CUGLG5HFNO3WB25C6D6VY4.jpg',\r\n        }, {\r\n            id: shortId.generate(),\r\n            src:'https://nodebird.com/favicon.ico'\r\n        }, {\r\n            id: shortId.generate(),\r\n            src:'https://cdn.cms-twdigitalassets.com/content/dam/blog-twitter/official/ko_kr/products/2019/topics/CB-14444_TopicsCOMMS_7_20191107.png.img.fullhd.medium.png'\r\n        }],\r\n        Comments:[{\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'hoho',\r\n            },\r\n            content: '개정판?',\r\n        }, {\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'yyzz',\r\n            },\r\n            content: '사고싶다',\r\n        }]\r\n    }],\r\n    imagePaths: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n}\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\n//동적 action creater(액션을 그때그때 생성)\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '이현호',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: '이현호',\r\n    },\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case ADD_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                addPostLoading: true,\r\n                addPostDone: false,\r\n                addPostError: null,\r\n            };\r\n        case ADD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                mainPosts:[dummyPost(action.data), ...state.mainPosts],\r\n                addPostDone: true,\r\n                addPostLoading: false,\r\n            };\r\n        case ADD_POST_FAILURE:\r\n            return{\r\n                ...state,\r\n                addPostLoading: false,\r\n                addPostError: action.error,\r\n            };\r\n        case ADD_COMMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: true,\r\n                addCommentDone: false,\r\n                addCommentError: null,\r\n            };\r\n        case ADD_COMMENT_SUCCESS:{\r\n            //mainPosts에서 id가 action.data.postId와 같은 인덱스 찾기\r\n            const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n            //mainPosts[postIndex]가 변경될 포스트이므로 얕은복사\r\n            const post = {...state.mainPosts[postIndex]};\r\n            //Comments 얕은복사하면서 댓글 넣어주기\r\n            post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n            //Comments가 얕은복사되어 새로운 객체가 생겼으니 mainPosts도 새로운 객체로 만듬\r\n            const mainPosts = [...state.mainPosts];\r\n            //원래포스트 있던 자리에 post 넣어줌\r\n            mainPosts[postIndex] = post;\r\n\r\n            return {\r\n                ...state,\r\n                //메인포스트 변경된값 추가\r\n                mainPosts,\r\n                addCommentDone: true,\r\n                addCommentLoading: false,\r\n            };\r\n        }\r\n        case ADD_COMMENT_FAILURE:\r\n            return{\r\n                ...state,\r\n                addCommentLoading: false,\r\n                addCommentError: action.error,\r\n            };\r\n        default:\r\n            return state;\r\n    };\r\n\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}