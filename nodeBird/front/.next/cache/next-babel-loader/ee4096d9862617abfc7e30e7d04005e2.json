{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Head from 'next/head';\nimport { Avatar, Card } from 'antd';\nimport AppLayout from '../../components/AppLayout';\nimport PostCard from '../../components/PostCard';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Hashtag = function Hashtag() {\n  var dispatch = useDispatch();\n  var router = useRouter();\n  var tag = router.query.tag;\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts,\n      hasMorePost = _useSelector.hasMorePost,\n      loadPostsLoading = _useSelector.loadPostsLoading;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      userInfo = _useSelector2.userInfo;\n\n  useEffect(function () {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePost && !loadPostsLoading) {\n          dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\n            data: tag\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePost, tag, mainPosts.length, loadPostsLoading]);\n  return /*#__PURE__*/_jsx(AppLayout, {\n    children: mainPosts.map(function (c) {\n      return /*#__PURE__*/_jsx(PostCard, {\n        post: c\n      }, c.id);\n    })\n  });\n};\n\nexport var __N_SSP = true;\nexport default Hashtag;","map":{"version":3,"sources":["C:/Users/user/cmder/projects/nodebird/front/pages/hashtag/[tag].js"],"names":["React","useEffect","useRouter","useSelector","useDispatch","Head","Avatar","Card","AppLayout","PostCard","Hashtag","dispatch","router","tag","query","state","post","mainPosts","hasMorePost","loadPostsLoading","user","userInfo","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","LOAD_USER_POSTS_REQUEST","lastId","length","id","data","addEventListener","removeEventListener","map","c"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAGA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAQC,MAAR,EAAgBC,IAAhB,QAA2B,MAA3B;AAKA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,QAAP,MAAqB,2BAArB;;;AAGA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAClB,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,MAAMQ,MAAM,GAAGV,SAAS,EAAxB;AACA,MAAOW,GAAP,GAAcD,MAAM,CAACE,KAArB,CAAOD,GAAP;;AACA,qBAAmDV,WAAW,CAAC,UAACY,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAA9D;AAAA,MAAOC,SAAP,gBAAOA,SAAP;AAAA,MAAkBC,WAAlB,gBAAkBA,WAAlB;AAAA,MAA+BC,gBAA/B,gBAA+BA,gBAA/B;;AACA,sBAAmBhB,WAAW,CAAC,UAACY,KAAD;AAAA,WAAWA,KAAK,CAACK,IAAjB;AAAA,GAAD,CAA9B;AAAA,MAAOC,QAAP,iBAAOA,QAAP;;AAEApB,EAAAA,SAAS,CAAC,YAAM;AACZ,aAASqB,QAAT,GAAmB;AACf,UAAGC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GACGF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAD9C,EACkD;AAC1C,YAAGV,WAAW,IAAI,CAACC,gBAAnB,EAAoC;AAChCR,UAAAA,QAAQ,CAAC;AACLkB,YAAAA,IAAI,EAAEC,uBADD;AAELC,YAAAA,MAAM,EAAEd,SAAS,CAACA,SAAS,CAACe,MAAV,GAAmB,CAApB,CAAT,IAAmCf,SAAS,CAACA,SAAS,CAACe,MAAV,GAAmB,CAApB,CAAT,CAAgCC,EAFtE;AAGLC,YAAAA,IAAI,EAAErB;AAHD,WAAD,CAAR;AAKH;AACJ;AACR;;AACDU,IAAAA,MAAM,CAACY,gBAAP,CAAwB,QAAxB,EAAkCb,QAAlC;AACA,WAAO,YAAM;AACTC,MAAAA,MAAM,CAACa,mBAAP,CAA2B,QAA3B,EAAqCd,QAArC;AACH,KAFD;AAGH,GAjBQ,EAiBN,CAACJ,WAAD,EAAcL,GAAd,EAAmBI,SAAS,CAACe,MAA7B,EAAqCb,gBAArC,CAjBM,CAAT;AAmBA,sBACI,KAAC,SAAD;AAAA,cACGF,SAAS,CAACoB,GAAV,CAAc,UAACC,CAAD;AAAA,0BACb,KAAC,QAAD;AAAqB,QAAA,IAAI,EAAEA;AAA3B,SAAeA,CAAC,CAACL,EAAjB,CADa;AAAA,KAAd;AADH,IADJ;AAOH,CAjCD;;;AAuDA,eAAevB,OAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {useRouter} from 'next/router';\r\nimport {END} from 'redux-saga';\r\nimport axios from 'axios';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Head from 'next/head';\r\nimport {Avatar, Card} from 'antd';\r\n\r\nimport wrapper from '../../store/configureStore';\r\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user';\r\nimport AppLayout from '../../components/AppLayout';\r\nimport PostCard from '../../components/PostCard';\r\n\r\n\r\nconst Hashtag = () => {\r\n    const dispatch = useDispatch();\r\n    const router = useRouter();\r\n    const {tag} = router.query;\r\n    const {mainPosts, hasMorePost, loadPostsLoading} = useSelector((state) => state.post);\r\n    const {userInfo} = useSelector((state) => state.user);\r\n\r\n    useEffect(() => {\r\n        function onScroll(){\r\n            if(window.scrollY + document.documentElement.clientHeight \r\n                > document.documentElement.scrollHeight - 300){\r\n                    if(hasMorePost && !loadPostsLoading){\r\n                        dispatch({\r\n                            type: LOAD_USER_POSTS_REQUEST,\r\n                            lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\r\n                            data: tag,\r\n                        });\r\n                    }\r\n                }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [hasMorePost, tag, mainPosts.length, loadPostsLoading]);\r\n\r\n    return (\r\n        <AppLayout>\r\n          {mainPosts.map((c) => (\r\n            <PostCard key={c.id} post={c} />\r\n          ))}\r\n        </AppLayout>\r\n      );\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if(context.req && cookie){\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_HASHTAG_POSTS_REQUEST,\r\n        data: context.params.tag,\r\n    });\r\n\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Hashtag;"]},"metadata":{},"sourceType":"module"}