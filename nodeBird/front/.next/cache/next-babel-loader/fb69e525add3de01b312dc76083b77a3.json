{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  const id = shortId.generate();\n\n  try {\n    //서버를 구현하기 전까지 delay로 비동기적인 효과 주자.\n    yield delay(1000); //const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      //data: result.data,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //서버를 구현하기 전까지 delay로 비동기적인 효과 주자.\n    yield delay(1000); //const result = yield call(removePostAPI, action.data);\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      //data: result.data,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //서버를 구현하기 전까지 delay로 비동기적인 효과 주자.\n    yield delay(1000); //const result = yield call(addCommentAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data //data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/user/cmder/projects/nodebird/front/sagas/post.js"],"names":["all","fork","call","put","takeLatest","delay","shortId","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","error","response","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all, fork, call, put, takeLatest, delay} from 'redux-saga/effects';\r\nimport shortId from 'shortid';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    const id = shortId.generate();\r\n    try{\r\n        //서버를 구현하기 전까지 delay로 비동기적인 효과 주자.\r\n        yield delay(1000);\r\n        //const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            //data: result.data,\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data){\r\n    return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try{\r\n        //서버를 구현하기 전까지 delay로 비동기적인 효과 주자.\r\n        yield delay(1000);\r\n        //const result = yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            //data: result.data,\r\n            data: action.data\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try{\r\n        //서버를 구현하기 전까지 delay로 비동기적인 효과 주자.\r\n        yield delay(1000);\r\n        //const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n            //data: result.data,\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}