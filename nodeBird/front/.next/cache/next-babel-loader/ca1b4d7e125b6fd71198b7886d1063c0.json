{"ast":null,"code":"import React, { useCallback, useEffect, useState } from 'react';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport moment from 'moment';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport FollowButton from './FollowButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nmoment.locale('ko'); //한글로 변환\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const id = me === null || me === void 0 ? void 0 : me.id; //me.id가 있으면 id가 생성됨\n\n  const liked = post.Likers.find(v => v.id === id);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onUnLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인하지 않고 게시글을 삭제할 수 없습니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('로그인하지 않고 리트윗할 수 없습니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsx(PostImages, {\n        images: post.Images\n      }),\n      actions: [/*#__PURE__*/_jsx(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\"), liked ? /*#__PURE__*/_jsx(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onUnLike\n      }, \"heart\") : /*#__PURE__*/_jsx(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\"), /*#__PURE__*/_jsx(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\"), /*#__PURE__*/_jsx(Popover, {\n        content: /*#__PURE__*/_jsx(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Button, {\n              children: \"\\uC218\\uC815\"\n            }), /*#__PURE__*/_jsx(Button, {\n              type: \"danger\",\n              onClick: onRemovePost,\n              loading: removePostLoading,\n              children: \"\\uC0AD\\uC81C\"\n            })]\n          }) : /*#__PURE__*/_jsx(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          })\n        }),\n        children: /*#__PURE__*/_jsx(EllipsisOutlined, {})\n      }, \"more\")],\n      title: post.RetweetId ? `${post.User.nickname}님이 리트윗 하셨습니다.` : null,\n      extra: id && /*#__PURE__*/_jsx(FollowButton, {\n        post: post\n      }),\n      children: post.RetweetId && post.Retweet ? /*#__PURE__*/_jsxs(Card, {\n        cover: post.Retweet.Images[0] && /*#__PURE__*/_jsx(PostImages, {\n          images: post.Retweet.Images\n        }),\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          style: {\n            float: 'right'\n          },\n          children: moment(post.createdAt).format('YYYY.MM.DD')\n        }), /*#__PURE__*/_jsx(Card.Meta, {\n          avatar: /*#__PURE__*/_jsx(Link, {\n            href: `/user/${post.Retweet.User.id}`,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: /*#__PURE__*/_jsx(Avatar, {\n                children: post.Retweet.User.nickname[0]\n              })\n            })\n          }),\n          title: post.Retweet.User.nickname,\n          description: /*#__PURE__*/_jsx(PostCardContent, {\n            postData: post.Retweet.content\n          })\n        })]\n      }) : /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          style: {\n            float: 'right'\n          },\n          children: moment(post.createdAt).format('YYYY.MM.DD')\n        }), /*#__PURE__*/_jsx(Card.Meta, {\n          avatar: /*#__PURE__*/_jsx(Link, {\n            href: `/user/${post.User.id}`,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: /*#__PURE__*/_jsx(Avatar, {\n                children: post.User.nickname[0]\n              })\n            })\n          }),\n          title: post.User.nickname,\n          description: /*#__PURE__*/_jsx(PostCardContent, {\n            postData: post.content\n          })\n        })]\n      })\n    }), commentFormOpened && /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(CommentForm, {\n        post: post\n      }), /*#__PURE__*/_jsx(List, {\n        header: `${post.Comments.length} 개의 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: item => /*#__PURE__*/_jsx(\"li\", {\n          children: /*#__PURE__*/_jsx(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/_jsx(Link, {\n              href: `/user/${item.User.id}`,\n              children: /*#__PURE__*/_jsx(\"a\", {\n                children: /*#__PURE__*/_jsx(Avatar, {\n                  children: item.User.nickname[0]\n                })\n              })\n            }),\n            content: item.content\n          })\n        })\n      })]\n    })]\n  });\n};\n\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/user/cmder/projects/nodebird/front/components/PostCard.js"],"names":["React","useCallback","useEffect","useState","Button","Card","Popover","Avatar","List","Comment","RetweetOutlined","HeartOutlined","HeartTwoTone","MessageOutlined","EllipsisOutlined","useSelector","useDispatch","Link","moment","PostImages","CommentForm","PostCardContent","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","FollowButton","locale","PostCard","post","dispatch","removePostLoading","state","commentFormOpened","setCommentFormOpened","me","user","id","liked","Likers","find","v","onLike","alert","type","data","onUnLike","onToggleComment","prev","onRemovePost","onRetweet","Images","User","RetweetId","nickname","Retweet","float","createdAt","format","content","Comments","length","item"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Button, Card, Popover, Avatar, List, Comment} from 'antd';\r\nimport {RetweetOutlined, HeartOutlined, HeartTwoTone,\r\n    MessageOutlined, EllipsisOutlined} from '@ant-design/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Link from 'next/link';\r\nimport moment from 'moment';\r\n\r\nimport PostImages from './PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST,\r\n     UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\nimport FollowButton from './FollowButton';\r\n\r\nmoment.locale('ko') //한글로 변환\r\n\r\nconst PostCard = ({post}) => {\r\n    const dispatch = useDispatch();\r\n    const {removePostLoading} = useSelector((state) => state.post);\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n\r\n    const {me} = useSelector((state) => state.user);\r\n    const id = me?.id;  //me.id가 있으면 id가 생성됨\r\n    const liked = post.Likers.find((v) => v.id === id);\r\n\r\n    const onLike = useCallback(() => {\r\n        if(!id){\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: LIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n    const onUnLike = useCallback(() => {\r\n        if(!id){\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: UNLIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    }, []);\r\n    const onRemovePost = useCallback(() => {\r\n        if(!id){\r\n            return alert('로그인하지 않고 게시글을 삭제할 수 없습니다.');\r\n        }\r\n        return dispatch({\r\n            type: REMOVE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n    const onRetweet = useCallback(() => {\r\n        if(!id){\r\n            return alert('로그인하지 않고 리트윗할 수 없습니다.');\r\n        }\r\n        return dispatch({\r\n            type: RETWEET_REQUEST,\r\n            data: post.id,\r\n        });\r\n    });\r\n\r\n    return(\r\n        <div>\r\n            <Card \r\n            cover={post.Images[0] && <PostImages images={post.Images} />}\r\n            actions={[\r\n                <RetweetOutlined key=\"retweet\" onClick={onRetweet}/>,\r\n                liked \r\n                    ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnLike} />\r\n                    :<HeartOutlined key=\"heart\" onClick={onLike} />,\r\n                <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n                <Popover key=\"more\" content={(\r\n                    <Button.Group>\r\n                        {id && post.User.id === id ? (\r\n                        <>\r\n                            <Button>수정</Button>\r\n                            <Button type=\"danger\" onClick={onRemovePost} loading={removePostLoading}>\r\n                                삭제\r\n                            </Button>\r\n                        </>\r\n                        ) : <Button>신고</Button>}\r\n                    </Button.Group>\r\n                )}>\r\n                    <EllipsisOutlined />\r\n                </Popover>,\r\n            ]}\r\n            title={post.RetweetId ? `${post.User.nickname}님이 리트윗 하셨습니다.` : null}\r\n            extra={id && <FollowButton post={post} />}\r\n            >\r\n                {post.RetweetId && post.Retweet \r\n                ? (\r\n                    <Card\r\n                    cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />} >\r\n                    <div style={{float: 'right'}}>{moment(post.createdAt).format('YYYY.MM.DD')}</div>\r\n                    <Card.Meta avatar={(\r\n                        <Link href={`/user/${post.Retweet.User.id}`}>\r\n                            <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\r\n                        </Link>\r\n                    )}\r\n                    title={post.Retweet.User.nickname} description={<PostCardContent postData={post.Retweet.content} />} />\r\n                    </Card>\r\n                )\r\n                : (\r\n                    <>\r\n                        <div style={{float: 'right'}}>{moment(post.createdAt).format('YYYY.MM.DD')}</div>\r\n                        <Card.Meta avatar={(\r\n                            <Link href={`/user/${post.User.id}`}>\r\n                                <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                            </Link>\r\n                        )}\r\n                        title={post.User.nickname} description={<PostCardContent postData={post.content} />} />\r\n                    </>\r\n                )}\r\n\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <div>\r\n                    <CommentForm post={post} />\r\n                    <List\r\n                        header ={`${post.Comments.length} 개의 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={(\r\n                                        <Link href={`/user/${item.User.id}`}>\r\n                                            <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                                        </Link>                                        \r\n                                    )}\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post:PropTypes.shape({\r\n        id: PropTypes.number,\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        createdAt: PropTypes.string,\r\n        Comments: PropTypes.arrayOf(PropTypes.object),\r\n        Images: PropTypes.arrayOf(PropTypes.object),\r\n        Likers: PropTypes.arrayOf(PropTypes.object),\r\n        RetweetId: PropTypes.number,\r\n        Retweet: PropTypes.objectOf(PropTypes.any),\r\n    }).isRequired,\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}