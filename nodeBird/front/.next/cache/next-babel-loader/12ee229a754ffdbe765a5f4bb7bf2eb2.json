{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  //data가 주소에 들어가있기때문에 2번째 인자로 주지 않아도 된다.\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${data}?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n} //form데이터는 바로 데이터로넣어주기\n\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchUnLikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLoadUserPosts() {\n  yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchUnLikePost), fork(watchLikePost), fork(watchLoadPost), fork(watchLoadPosts), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/user/cmder/projects/nodebird/front/sagas/post.js"],"names":["all","fork","call","put","takeLatest","delay","throttle","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","retweet","action","result","type","err","console","error","response","uploadImagesAPI","uploadImages","unlikePostAPI","delete","unlikePost","likePostAPI","patch","likePost","loadPostAPI","get","loadPost","loadPostsAPI","lastId","loadPosts","loadUserPostsAPI","loadUserPosts","loadHashtagPostsAPI","loadHashtagPosts","addPostAPI","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchRetweet","watchUploadImages","watchUnLikePost","watchLikePost","watchLoadPost","watchLoadPosts","watchLoadUserPosts","watchLoadHashtagPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all, fork, call, put, takeLatest, delay, throttle} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST ,UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, \r\n    UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, \r\n    RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, \r\n    LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, \r\n    LOAD_USER_POSTS_REQUEST, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, \r\n    LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction retweetAPI(data){\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try{\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data){\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try{\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data){\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try{\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data){\r\n    //data가 주소에 들어가있기때문에 2번째 인자로 주지 않아도 된다.\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try{\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostAPI(data){\r\n    return axios.get(`/post/${data}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try{\r\n        const result = yield call(loadPostAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId){\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try{\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadUserPostsAPI(data, lastId){\r\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try{\r\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId){\r\n    return axios.get(`/hashtag/${data}?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try{\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n//form데이터는 바로 데이터로넣어주기\r\nfunction addPostAPI(data){\r\n    return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try{\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data){\r\n    return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try{\r\n        const result = yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try{\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchRetweet(){\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\n\r\nfunction* watchUploadImages(){\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchUnLikePost(){\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLikePost(){\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchLoadPost(){\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchLoadPosts(){\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchLoadUserPosts(){\r\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts(){\r\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchUnLikePost),\r\n        fork(watchLikePost),\r\n        fork(watchLoadPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}