{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  //data가 주소에 들어가있기때문에 2번째 인자로 주지 않아도 된다.\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      //data: result.data,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchUnLikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchUnLikePost), fork(watchLikePost), fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/user/cmder/projects/nodebird/front/sagas/post.js"],"names":["all","fork","call","put","takeLatest","delay","throttle","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","unlikePostAPI","data","delete","unlikePost","action","result","type","err","error","response","likePostAPI","patch","likePost","loadPostsAPI","get","loadPosts","addPostAPI","post","content","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","console","watchUnLikePost","watchLikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all, fork, call, put, takeLatest, delay, throttle} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST ,UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\n\r\nfunction unlikePostAPI(data){\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try{\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data){\r\n    //data가 주소에 들어가있기때문에 2번째 인자로 주지 않아도 된다.\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try{\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(data){\r\n    return axios.get('/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try{\r\n        const result = yield call(loadPostsAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('/post', {content: data});\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try{\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data){\r\n    return axios.delete('/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try{\r\n        //const result = yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            //data: result.data,\r\n            data: action.data\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try{\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchUnLikePost(){\r\n    yield takeLatest(UNLIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchLikePost(){\r\n    yield takeLatest(LIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPosts(){\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchUnLikePost),\r\n        fork(watchLikePost),\r\n        fork(watchLoadPosts),\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}