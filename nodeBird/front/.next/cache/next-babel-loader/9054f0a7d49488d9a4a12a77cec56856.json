{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    //서버를 구현하기 전까지 delay로 비동기적인 효과 주자.\n    yield delay(1000); //const result = yield call(logInAPI, action.data);\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      //data: result.data,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE' //data: err.response.data,\n\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    //서버를 구현하기 전까지 delay로 비동기적인 효과 주자.\n    yield delay(1000); //const result = yield call(logOutAPI);\n\n    yield put({\n      type: 'LOG_OUT_SUCCESS' //data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE' //data: err.response.data,\n\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/user/cmder/projects/nodebird/front/sagas/user.js"],"names":["all","fork","call","put","takeLatest","delay","logInAPI","data","axios","post","logIn","action","type","err","logOutAPI","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,UAA9B,EAA0CC,KAA1C,QAAsD,oBAAtD;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOC,KAAK,CAACC,IAAN,CAAW,YAAX,EAAyBF,IAAzB,CAAP;AACH;;AAED,UAAUG,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAG;AACC;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX,CAFD,CAGC;;AACA,UAAMF,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,gBADA;AAEN;AACAL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAHP,KAAD,CAAT;AAKH,GATD,CASE,OAAMM,GAAN,EAAU;AACR,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,gBADA,CAEN;;AAFM,KAAD,CAAT;AAIH;AACJ;;AAED,SAASE,SAAT,GAAoB;AAChB,SAAON,KAAK,CAACC,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUM,MAAV,GAAmB;AACf,MAAG;AACC;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX,CAFD,CAGC;;AACA,UAAMF,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,iBADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GARD,CAQE,OAAMC,GAAN,EAAU;AACR,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,iBADA,CAEN;;AAFM,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUI,UAAV,GAAsB;AAClB,QAAMZ,UAAU,CAAC,gBAAD,EAAmBM,KAAnB,CAAhB;AACH;;AAED,UAAUO,WAAV,GAAuB;AACnB,QAAMb,UAAU,CAAC,iBAAD,EAAoBW,MAApB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMlB,GAAG,CAAC,CACNC,IAAI,CAACe,UAAD,CADE,EAENf,IAAI,CAACgB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import {all, fork, call, put, takeLatest, delay} from 'redux-saga/effects';\r\n\r\nfunction logInAPI(data){\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try{\r\n        //서버를 구현하기 전까지 delay로 비동기적인 효과 주자.\r\n        yield delay(1000);\r\n        //const result = yield call(logInAPI, action.data);\r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            //data: result.data,\r\n            data: action.data,\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            //data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n    try{\r\n        //서버를 구현하기 전까지 delay로 비동기적인 효과 주자.\r\n        yield delay(1000);\r\n        //const result = yield call(logOutAPI);\r\n        yield put({\r\n            type: 'LOG_OUT_SUCCESS',\r\n            //data: result.data,\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type: 'LOG_OUT_FAILURE',\r\n            //data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogIn(){\r\n    yield takeLatest('LOG_IN_REQUEST', logIn);\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}