{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log(action);\n  return next(action);\n};\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = true ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: false\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/user/cmder/projects/nodebird/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","createStore","compose","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,oBAA5B;AACA,SAAQC,eAAR,EAAyBC,WAAzB,EAAsCC,OAAtC,QAAoD,OAApD;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,KAA2BC,IAAD,IAAWC,MAAD,IAAY;AACrEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOD,IAAI,CAACC,MAAD,CAAX;AACH,CAHD;;AAKA,MAAMG,cAAc,GAAG,MAAM;AACzB,QAAMC,cAAc,GAAGX,oBAAoB,EAA3C;AACA,QAAMY,WAAW,GAAG,CAACD,cAAD,EAAiBR,gBAAjB,CAApB;AACA,QAAMU,QAAQ,GAAG,OACff,OAAO,CAACF,eAAe,CAAC,GAAGgB,WAAJ,CAAhB,CADQ,GAEfb,mBAAmB,CAACH,eAAe,CAAC,GAAGgB,WAAJ,CAAhB,CAFrB;AAIA,QAAME,KAAK,GAAGjB,WAAW,CAACI,OAAD,EAAUY,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBd,QAAnB,CAAjB;AAGA,SAAOY,KAAP;AACH,CAZD;;AAcA,MAAMG,OAAO,GAAGtB,aAAa,CAACe,cAAD,EACzB;AAACQ,EAAAA,KAAK;AAAN,CADyB,CAA7B;AAGA,eAAeD,OAAf","sourcesContent":["import {createWrapper} from 'next-redux-wrapper';\r\nimport {applyMiddleware, createStore, compose} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\nconst loggerMiddleware = ({dispatch, getState}) => (next) => (action) => {\r\n    console.log(action);\r\n    return next(action);\r\n};\r\n\r\nconst configureStore = () => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware, loggerMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(applyMiddleware(...middlewares)) \r\n    : composeWithDevTools(applyMiddleware(...middlewares))\r\n\r\n    const store = createStore(reducer, enhancer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n\r\n\r\n    return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, \r\n    {debug:process.env.NODE_ENV === 'development'});\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}