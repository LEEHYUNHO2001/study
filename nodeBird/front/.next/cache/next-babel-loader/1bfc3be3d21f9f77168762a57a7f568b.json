{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\cmder\\\\projects\\\\nodebird\\\\front\\\\components\\\\PostCard.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport FollowButton from './FollowButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    removePostLoading,\n    retweetFailure\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const id = me === null || me === void 0 ? void 0 : me.id; //me.id가 있으면 id가 생성됨\n\n  const liked = post.Likers.find(v => v.id === id);\n  useEffect(() => {\n    if (retweetFailure) {\n      alert(retweetFailure);\n    }\n  }, [retweetFailure]);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onUnLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인하지 않고 게시글을 삭제할 수 없습니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('로그인하지 않고 리트윗할 수 없습니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 38\n      }, this),\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onUnLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              onClick: onRemovePost,\n              loading: removePostLoading,\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, \"more\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)],\n      extra: id && /*#__PURE__*/_jsxDEV(FollowButton, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 26\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          children: post.User.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 36\n        }, this),\n        title: post.User.nickname,\n        description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n          postData: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 57\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), commentFormOpened && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        header: `${post.Comments.length} 개의 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n              children: item.User.nickname[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 45\n            }, this),\n            content: item.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/user/cmder/projects/nodebird/front/components/PostCard.js"],"names":["React","useCallback","useEffect","useState","PropTypes","Button","Card","Popover","Avatar","List","Comment","RetweetOutlined","HeartOutlined","HeartTwoTone","MessageOutlined","EllipsisOutlined","useSelector","useDispatch","PostImages","CommentForm","PostCardContent","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","FollowButton","PostCard","post","dispatch","removePostLoading","retweetFailure","state","commentFormOpened","setCommentFormOpened","me","user","id","liked","Likers","find","v","alert","onLike","type","data","onUnLike","onToggleComment","prev","onRemovePost","onRetweet","Images","User","nickname","content","Comments","length","item","propTypes","shape","number","object","string","createdAt","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Button, Card, Popover, Avatar, List, Comment} from 'antd';\r\nimport {RetweetOutlined, HeartOutlined, HeartTwoTone,\r\n    MessageOutlined, EllipsisOutlined} from '@ant-design/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport PostImages from './PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST,\r\n     UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\nimport FollowButton from './FollowButton';\r\n\r\nconst PostCard = ({post}) => {\r\n    const dispatch = useDispatch();\r\n    const {removePostLoading, retweetFailure} = useSelector((state) => state.post);\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n\r\n    const {me} = useSelector((state) => state.user);\r\n    const id = me?.id;  //me.id가 있으면 id가 생성됨\r\n    const liked = post.Likers.find((v) => v.id === id);\r\n\r\n    useEffect(() => {\r\n        if(retweetFailure){\r\n            alert(retweetFailure);\r\n        }\r\n    }, [retweetFailure]);\r\n\r\n    const onLike = useCallback(() => {\r\n        if(!id){\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: LIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n    const onUnLike = useCallback(() => {\r\n        if(!id){\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: UNLIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    }, []);\r\n    const onRemovePost = useCallback(() => {\r\n        if(!id){\r\n            return alert('로그인하지 않고 게시글을 삭제할 수 없습니다.');\r\n        }\r\n        return dispatch({\r\n            type: REMOVE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n    const onRetweet = useCallback(() => {\r\n        if(!id){\r\n            return alert('로그인하지 않고 리트윗할 수 없습니다.');\r\n        }\r\n        return dispatch({\r\n            type: RETWEET_REQUEST,\r\n\r\n        });\r\n    });\r\n\r\n    return(\r\n        <div>\r\n            <Card \r\n            cover={post.Images[0] && <PostImages images={post.Images} />}\r\n            actions={[\r\n                <RetweetOutlined key=\"retweet\" onClick={onRetweet}/>,\r\n                liked \r\n                    ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnLike} />\r\n                    :<HeartOutlined key=\"heart\" onClick={onLike} />,\r\n                <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n                <Popover key=\"more\" content={(\r\n                    <Button.Group>\r\n                        {id && post.User.id === id ? (\r\n                        <>\r\n                            <Button>수정</Button>\r\n                            <Button type=\"danger\" onClick={onRemovePost} loading={removePostLoading}>\r\n                                삭제\r\n                            </Button>\r\n                        </>\r\n                        ) : <Button>신고</Button>}\r\n                    </Button.Group>\r\n                )}>\r\n                    <EllipsisOutlined />\r\n                </Popover>,\r\n            ]}\r\n            extra={id && <FollowButton post={post} />}\r\n            >\r\n                <Card.Meta avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                title={post.User.nickname} description={<PostCardContent postData={post.content} />} />\r\n                <Button></Button>\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <div>\r\n                    <CommentForm post={post} />\r\n                    <List\r\n                        header ={`${post.Comments.length} 개의 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post:PropTypes.shape({\r\n        id: PropTypes.number,\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        createdAt: PropTypes.string,\r\n        Comments: PropTypes.arrayOf(PropTypes.object),\r\n        Images: PropTypes.arrayOf(PropTypes.object),\r\n        Likers: PropTypes.arrayOf(PropTypes.object),\r\n    }).isRequired,\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}